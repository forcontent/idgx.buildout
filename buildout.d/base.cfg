[buildout]
extends =
    https://dist.plone.org/release/5.2.4/versions.cfg
    versions.cfg

# Não baixe coisas novas, a menos que seja necessário para satisfazer as dependências.
# Substitua isso na linha de comando com o sinalizador "-n".
newest = false

# mostra as versões selecionadas sempre que fazemos uma escolha automática
show-picked-versions = true

versions = versions

# Escolha os lançamentos finais em vez dos lançamentos de desenvolvimento
prefer-final = true

relative-paths = true

find-links += http://dist.plone.org/thirdparty/

# Diretório var e de log
var-dir=${buildout:directory}/var
log-dir=${buildout:var-dir}/log

# Defindo um diretório de templates que poderá ser alterado por um cuscomizado
template-directory = ${buildout:directory}/etc/templates

# Defindo um diretório de condigurações
config-directory = ${buildout:directory}/etc

# Diretóriuo para eggs(pacotes) cuscomizados
# podemos mais tarde extender ele com +=
custom-eggs =

# Pacotes auxiliares para desenvolvimento
devtool-eggs =
    Products.PDBDebugMode
    Products.PrintingMailHost
    pdbpp
    plone.app.debugtoolbar
    plone.reload
    zodbverify

package-name = idgx.portal

parts =
    instance
    mkdir-chameleon
    zopepy

eggs =
    Plone 
    Pillow
    ${buildout:package-name}

zcml =
    ${buildout:package-name}

[ports]
base            = 80
cache           = 81
supervisor      = 9001
zeoserver       = 8100
loadbalancer    = 90${:base}
instance        = ${:base}80
zeoclient1      = ${:base}81
zeoclient2      = ${:base}82
zeoclient_debug = ${:base}90

[bindips]
allbind         = 0.0.0.0
local           = 127.0.0.1
cache           = ${:local}
supervisor      = ${:local}
zeoserver       = ${:local}
loadbalancer    = ${:local}
instance        = ${:allbind}
zeoclient1      = ${:local}
zeoclient2      = ${:local}
zeoclient_debug = ${:local}

[users]
os = plone
instance = admin
supervisor = admin

[instance]
recipe = plone.recipe.zope2instance
user = ${users:instance}:admin
# https://github.com/plone/buildout.coredev/pull/697
zodb-temporary-storage = off
zodb-cache-size = 80000
effective-user = ${users:os}
http-address = ${ports:instance}
ip-address = ${bindips:instance}
security-policy-implementation = C
debug-mode = off
# With Plone 5.2+, we default to wsgi
wsgi = on
verbose-security = off
deprecation-warnings = off
eggs = ${buildout:eggs}
zcml = ${buildout:zcml}
file-storage = ${buildout:var-dir}/filestorage/Data.fs
blob-storage = ${buildout:var-dir}/blobstorage
http-fast-listen = on
event-log-max-size = 5 MB
event-log-old-files = 5
access-log-max-size = 20 MB
access-log-old-files = 5
zodb-temporary-storage =
    <zodb_db temporary>
        # Temporary storage database (for sessions)
        <temporarystorage>
          name temporary storage for sessioning
        </temporarystorage>
        mount-point /temp_folder
        container-class Products.TemporaryFolder.TemporaryContainer
    </zodb_db>
environment-vars =
    CHAMELEON_CACHE ${buildout:var-dir}/chameleon-cache
    CHAMELEON_DEBUG false
    CHAMELEON_RELOAD false
    CHAMELEON_EAGER true
    PYTHON_EGG_CACHE ${buildout:var-dir}/.python-eggs
    PTS_LANGUAGES en, es, pt-br
    zope_i18n_allowed_languages en, es, pt_BR
    zope_i18n_compile_mo_files false
    TEMP ${buildout:var-dir}/tmp
    TMP ${buildout:var-dir}/tmp
    TZ America/Sao_Paulo
zcml-additional =
    <configure xmlns="http://namespaces.zope.org/zope"
               xmlns:plone="http://namespaces.plone.org/plone">
        <plone:CORSPolicy
            allow_origin="http://localhost:3000,http://127.0.0.1:3000"
            allow_methods="DELETE,GET,OPTIONS,PATCH,POST,PUT"
            allow_credentials="true"
            expose_headers="Content-Length,X-My-Header"
            allow_headers="Accept,Authorization,Content-Type,X-Custom-Header,Origin"
            max_age="3600"
            />
    </configure>

[mkdir-chameleon]
recipe = plone.recipe.command
command =
    mkdir -p ${buildout:var-dir}/chameleon-cache
    rm -Rf ${buildout:var-dir}/chameleon-cache/*
update-command = ${:command}

[cleanning]
recipe = plone.recipe.command
command =
    find . -name '*.pyc' -o -name '*.pyo' -o -name '~*' -o -name '*.swp' -o -name '*~'
update-command = ${:command}

[precompiler]
recipe = plone.recipe.precompiler
eggs = ${buildout:eggs}
compile-mo-files = true

[setpermissions]
recipe = plone.recipe.command
command =
    chmod 600 .installed.cfg
    find ${buildout:var-dir}-type d -exec chmod 770 {} \; 2> /dev/null
    find ${buildout:var-dir}-type f -exec chmod 660 {} \; 2> /dev/null
    chmod 754 ${buildout:directory}/bin/*
update-command = ${:command}

[zopepy]
recipe = zc.recipe.egg
eggs =
# Necessário mencionar explicitamente Products.CMFPlone para que os recursos de compilação
# do plone sejam encontrados
    Products.CMFPlone
    ${instance:eggs}
interpreter = zopepy
scripts =
    zopepy
    plone-compile-resources

[logrotate]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/templates/logrotate.conf.tmpl
output = ${buildout:directory}/etc/logrotate.conf

[versions-dump]
# keep versions.cfg file for closed production environments updated
recipe = plone.recipe.command
file = ${buildout:directory}/etc/versions.cfg
command =
    echo "# THIS FILE IS GENERATED AUTOMATICALLY\n[versions]" > ${:file}
    buildout annotate versions | tail -n +6 | grep "= " | sed 's/= / = /' | sort >> ${:file}
update-command = ${:command}
